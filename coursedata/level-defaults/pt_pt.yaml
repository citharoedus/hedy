1:
    intro_text: |
        Bem vindo(a) à Hedy! No nível 1 podes usar os comandos `print`, `ask` e `echo`.

        Na barra à esquerda podes ver todos os comandos do nível 1.

        Pressiona o botão azul e o código será automaticamente escrito!

        Experimenta o código por ti mesmo com o botão verde "Executa o código", por baixo do quadro de programação esquerdo.

        Não sabes o que criar? Nos próximos separadores vais encontrar algumas ideias sobre o que fazer.
    start_code: "print Olá mundo!"
    commands:
    -   explanation: "Escreve algo usando `print`."
        example: "Exemplo: print Olá, bem vindo(a) à Hedy!"
        demo_code: "print Olá, bem vindo(a) à Hedy!"
    -   explanation: "Pergunta algo usando `ask`."
        example: "Exemplo: ask Qual é a tua cor favorita?"
        demo_code: "ask Qual é a tua cor favorita?"
    -   explanation: "Repete algo utilizando `echo`."
        example: "Example: echo Então a tua cor favorita é..."
        demo_code: |-
            ask Qual é a tua cor favorita?
            echo Então a tua cor favorita é...
2:
    intro_text: |
        No nível 2 vamos aprender algo novo. Podes chamar uma palavra usando `is`.

        Se utilizares o código `nome is Hedy`, podes usar nome em qualquer parte do teu código, que será substituído por Hedy.

        Nota: `ask` mudou, também guardas a resposta com um nome, da seguinte forma:

        ```
        resposta is Como te chamas?
        ```

        `print` continua a funcionar como no nível 1 e já não precisas de `echo`.

        No nível 2 também podes criar uma lista. Tu podes fazer o computador escolher algo aleatório (que quer dizer, algo ao calhas) a partir dessa lista. Fazes isso utilizando 'at random'.

        Podes encontrar todos os códigos do nível 2 na barra esquerda. Também tens tarefas nos separadores.
    start_code: "print Olá mundo!"
    commands:
    -   explanation: "Atribui a uma palavra um nome para usar no programa utilizando `is`."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print Bem vindo(a) nome
    -   explanation: "Pergunta algo usando `ask`. Atenção! Precisas de atribuir um nome à resposta usando `is`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor é a tua favorita!
    -   explanation: "Escolhe uma palavra aleatória de um grupo de palavras usando `at` e `random`."
        example: "Exemplo: animais is cão, gato, canguru."
        demo_code: |-
            animais is cão, gato, canguru
            print animais at random
3:
    start_code: "print 'Olá mundo'"
    intro_text: |
        `ask` Funciona da mesma forma no nível 3 como acontecia no nível 2, mas `print`  está diferente agora.

         Tens que colocar o texto que queres escrever entre aspas simples.

         Isto é útil, porque agora podes escrever todas as palavras que queres. O mesmo acontece com as palavras com que armazenavas algo usando `is`.

         A maioria das linguagens de programação também usam aspas simples quando querem escrever algo, por isso estamos um passo mais próximo da verdadeira programação!

         ## As tarefas estão ficar cada vez mais difíceis
         Vais encontrar os comandos à esquerda outra vez e as tarefas nos separadores seguintes. As tarefas estão a tornar-se cada vez mais difíceis, à medida que avanças pelos separadores.
         Por isso, é melhor começar pela esquerda com a história e avançar em direção à direita, para que o desafio vá crescendo a cada passo.
    commands:
    -   explanation: "Escreve com exactidão usando aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy.'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy.'"
    -   explanation: "Atribui um nome a um pequeno texto e `print` sem aspas simples."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'O meu nome é ' name
    -   explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor ' é a tua favorita!'
4:
    start_code: |-
        nome is ask Como te chamas?
        if nome is Hedy print 'Fixe!' else print 'pff'
    intro_text: |
        `ask` e `print` ainda funcionam como no  nível 3.

         No nível 4 existe algo novo, o `if`! Com o `if` podes escolher entre duas opções diferentes.

         ## Exemplo de Código Hedy
         ```
         nome is ask Como te chamas?
         if nome is Hedy print 'Fixe!' else print 'boo!'
         ```

         Este código escreve "Fixe!" se introduzires Hedy como nome, e "boo!" se introduzires outra coisa qualquer.

         ## As tarefas estão ficar cada vez mais difíceis

         Também no nível 4 as tarefas nos separadores estão a tornar-se cada vez mais difíceis. Por isso, completa-as da esquerda para a direita.
    commands:
    -   explanation: "Escreve com exactidão usando aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy.'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy.'"
    -   explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor ' é a tua favorita!'
    -   explanation: "Faz uma escolha usando `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            if cor is verde print 'Linda!' else print 'pff'
5:
    start_code: "repeat 3 times print 'Hedy é divertida!'"
    intro_text: |
        `ask`, `print` e `if` funcionam exatamente igual ao que acontecia no nível 4.
        Mas o nível 5 acrescenta o comando `repeat`. `repeat` pode ser usado para executar uma linha de código múltiplas vezes.
        ## Exemplo de Código Hedy
        ```
        Repete 3 vezes print 'Hedy é divertida!'
        ```
    commands:
    -   explanation: "Escreve com exactidão usando aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy.'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy.'"
    -   explanation: "Pergunta algo usando `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor ' é a tua favorita!'
    -   explanation: "Faz uma escolha usando `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            if cor is verde print 'Linda!' else print 'pff'
    -   explanation: "`repeat` e `if` juntos"
        example: "Exemplo: if cor is verde repeat 3 times print 'Linda!' else repeat 5 times print 'pff'"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            if cor is verde repeat 3 times print 'Linda!' else repeat 5 times print 'pff'
6:
    start_code: "print '5 vezes 5 é ' 5 * 5"
    intro_text: |
        `ask`, `print`, `if` e `repeat` continuam a funcionar como no nível 4 e 5.
         Mas no nível 6 temos algo novo, também podes fazer cálculos.

         No nível 6 novos códigos são adicionados, agora podes começar a calcular com o teu código.

         A adição é fácil, escreves tal e qual como na matemática: `5 + 5` por exemplo. A subtração também funciona na perfeição, é `5 - 5`.

         A multiplicação é um pouco diferente, porque não existe o símbolo da multiplicação no teu teclado. Basta procurares, não existe mesmo!
         Por causa disso, multiplicamos usando o asterisco: `5 * 5`. Lês isto como sendo 5 vezes 5, assim, vais te lembrar mais facilmente.
         ## Exemplo de Código Hedy
         ```
         print '5 mais 5 é ' 5 + 5
         print '5 menos 5 é ' 5 - 5
         print '5 vezes 5 é ' 5 * 5
         ```
    commands:
    -   explanation: "Escreve com exactidão com aspas simples."
        example: "Exemplo: print '5 vezes 5 é ' 5 * 5"
        demo_code: "print '5 vezes 5 é ' 5 * 5"
    -   explanation: "Pergunta por um cálculo e verifica se está correcto."
        example: "Exemplo: resposta is ask Quanto é 10 mais 10?"
        demo_code: |-
            resposta is ask Quanto é 10 mais 10?
            if resposta is 20 print 'Sim!' else print 'Oops'
    -   explanation: "`repeat` e `if` juntos"
        example: "Exemplo: if produto is 50 repeat 3 times print 'Correcto!' else repeat 5 times print 'Errado!'"
        demo_code: |-
            produto is ask Quanto é 10 vezes 5?
            if produto is 50 repeat 3 times print 'Correcto!' else repeat 5 times print 'Errado!'
7:
    start_code: |-
        repeat 5 times
            print 'Olá a todos!'
            print 'Isto vai ser escrito 5 vezes'
    intro_text: |
        `ask` e `print` continuam a funcionar da mesma forma. Mas `if` e `repeat` mudaram!
        Podes executar grupos de código juntos, mas vais ter criar indentação no código.
        Isto significa colocar quatro espaços no início da linha. Isto também se aplica quando queres criar um bloco de uma linha.

        ## Exemplo de Código Hedy
        ```
        repeat 5 times
            print 'Olá a todos!'
            print 'Tudo isto é repetido 5 vezes.'
        ```
        "Se juntares um `repeat` e um `if`, vais precisar de colocar uma indentação em cada bloco. Dá uma vista de olhos ao código de exemplo para mais detalhes!"

         ## Exemplo de Código Hedy
         ```
         cor is ask Qual é a tua cor favorita?
         if cor is verde
             repeat 3 times
                 print 'Linda!'
         else
             repeat 5 times
                 print 'Nada de especial!'
         ```

    commands:
    -   explanation: "Escreve algo. Lembra-te de usar aspas simples para escrever literalmente."
        example: "Exemplo: print '5 vezes 5 é ' 5 * 5"
        demo_code: "print '5 vezes 5 é ' 5 * 5"
    -   explanation: "Pergunta pelo resultado de uma adição e verifica se está correcto. Podemos agora escrever 2 linhas."
        example: "Exemplo: resposta is ask Quanto é 5 mais 5?"
        demo_code: |-
            resposta is ask Quanto é 5 mais 5?
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, o resultado era ' resultado
            else
                print 'Oops!'
                print 'O resultado é 10.'
    -   explanation: "`if` e `repeat` juntos"
        example: "Exemplo: if cor is verde repeat 3 times print 'Linda!' else repeat 5 times print 'pff'"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            if cor is verde
                repeat 3 times
                    print 'Linda!'
            else
                repeat 5 times
                    print 'pff'
7-1:
    start_code: "for counter is 1 to 5\n    print counter"
    intro_text:
        "`print` funciona do mesmo modo, mas o `repeat` agora é substituído por `for`!
        Podes agora escrever `for counter is 1 to 5` e usar `counter` no teu programa.
        Experimenta para veres o que acontece!
        Lembra-te de usar indentações depois das instruções `for` e `if` (Isto significa começar uma frase com 4 espaços)."
    commands:
    -   name: "ciclo for"
        explanation: "Substituímos `repeat` por `for` e adicionamos um intervalo de valores."
        example: "for counter is 1 to 5"
        demo_code: "for counter is 1 to 5\n    print counter"
    -   explanation: "Pergunta pelo resultado de uma soma e verifica se está correcto. Podemos agora escrever 2 linhas."
        example: "Exemplo: resultado is ask Quanto é 5 mais 5?"
        demo_code: |-
            resultado is ask Quanto é 5 mais 5?
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, o resultado é ' resultado
            else
                print 'Oops!'
                print 'O resultado é 10.'
8:
    start_code: "for counter in range 1 to 5\n    print counter"
    intro_text:
        "`print` funciona da mesma forma, mas o `repeat` é agora substituído por `for`!
        Podes agora escrever `for counter in range 1 to 5` e usar `counter` no teu programa. Experimenta para veres o que acontece!
        Lembra-te de usar indentações depois das instruções `for` e `if` (Isto significa começar uma frase com 4 espaços)."
    commands:
    -   name: "ciclo for"
        explanation: "Substituímos `repeat` por `for` e acrescentamos um intervalo de valores"
        example: "for counter in range 1 to 5"
        demo_code: "for counter in range 1 to 5\n    print counter"
    -   explanation: "Pergunta pelo resultado de uma soma e verifica se está correcto. Podemos agora escrever 2 linhas."
        example: "Exemplo: resultado is ask Quanto é 5 mais 5?"
        demo_code: |-
            resultado is ask Quanto é 5 mais 5?
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, o resultado é ' answer
            else
                print 'Oops!'
                print 'O resultado é 10.'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Preparados ou não, aqui vou eu!'
    intro_text: "Agora vamos mudar um pouca as coisas com as indentações. Cada vez que precisarmos de criar uma indentação, vamos precisar de `:` na linha antes da indentação."
    commands:
    -   explanation: "Quando usamos um `for`, precisamos de colocar `:` depois da instrução `for`!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 11:
                print i
            print 'Preparados ou não, aqui vou eu!'
    -   explanation: "Precisamos de fazer a mesma coisa sempre nas instruções `if`."
        example: "if cor is verde:'"
        demo_code: |-
            cor is verde
            if cor is verde:
                print 'A cor é verde.'
            else:
                print 'A cor não é verde.'
    -   explanation: "Vamos te mostrar um novo comando que podes usar: `elif`. `elif` significa \"else if\". Começamos por verificar se o `if` está correcto, se este não for verdade, nós verificamos o `elif` e se este também não for verdadeiro, passamos para o `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a é 1'
            elif a is 2:
                print 'a é 2'
            else:
                print 'a não é 1 nem 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'estamos na ronda: ' i ' e contamos: ' j
    intro_text: "A partir de agora, podemos repetir um ciclo mais vezes. No exemplo contamos até 5 e fazemos isso 3 vezes. Portanto, precisamos de 3 rondas e contamos até 5 todas as vezes."
    commands:
    -   explanation: "Este é um exemplo com a instrução `for`."
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'estamos na ronda: ' i ' e contamos: ' j
    -   explanation: "Conseguimos fazer o mesmo nas instruções `if`"
        demo_code: |-
            cor is azul
            cordois is amarelo
            if cor is azul:
                if cordois is amarelo:
                    print 'Juntos fazemos verde!'
11:
    start_code: |-
        idade is input('Quantos anos tens?')
        print('Então já tivestes estas idades:')
        for i in range(0, idade):
            print(i)
    intro_text: "Vamos usar parênteses curvos e vamos alterar o `ask`! Vamos alterar `ask` para `input`! Com `print`, `input` e `for` vamos usar parênteses curvos também."
    commands:
    -   explanation: "Vamos usar agora parênteses com `print`!"
        example: "Por exemplo: print('Olá Mundo!')"
        demo_code: "print('Olá Mundo!')"
    -   explanation: "Retiramos `ask` e chamamos-lhe `input`. Também vamos usar os parênteses."
        example: "Por exemplo: nome is input('Como te chamas?')"
        demo_code: |-
            nome is input('Como te chamas?')
            print('Então o teu nome é ' name)
    -   explanation: "Agora vamos colocar os números entre parênteses nos ciclos `for`."
        example: "Por exemplo: for i in range(0, 10):"
        demo_code: |-
            for i in range(0, 10):
                print(i)
            print('Preparados ou não, aqui vou eu!')
12:
    start_code: |-
        fruta is ['maçã', 'banana', 'cereja']
        print(fruta)
    intro_text: "Vamos colocar as listas entre parênteses rectos! Também precisamos de usar aspas simples (') em torno de cada elemento da lista."
    commands:
    -   explanation: "Vamos colocar as listas entre parênteses rectos! Também precisamos de usar aspas simples (') em torno de cada elemento da lista."
        example: "Por exemplo: fruta is ['maçã', 'banana', 'cereja']"
        demo_code: |-
            fruta is ['maçã', 'banana', 'cereja']
            print(fruta)
    -   name: "Obtém um elemento da lista!"
        explanation: "Para obter um elemento de uma lista usamos [número], pelo que fruta[1] significa: obtém a primeira fruta da lista!"
        example: "Por exemplo: primeirafruta is fruta[1]"
        demo_code: |-
            fruta is ['banana', 'maçã', 'cereja']
            primeirafruta is fruta[1]
            print(primeirafruta)
    -   name: "Obtém um elemento aleatório da lista!"
        explanation: "Para obter um elemento aleatória de uma lista, usamos [random], portanto, fruta[random] significa: obtém uma fruta qualquer da lista!"
        example: "Por exemplo: qualquerfruta is fruta[random]"
        demo_code: |-
            fruta is ['banana', 'maçã', 'cereja']
            qualquerfruta is fruta[random]
            print(qualquerfruta)
13:
    start_code: |-
        ainda_estas_aqui is False
        ainda_estas_aqui is input('Ainda está aqui? sim ou não?')
        ainda_estas_aqui is Sim:
            ainda_estas_aqui is True
        ainda_estas_aqui is True:
            print('Olá!')
        if ainda_estas_aqui is False:
            print('Adeus!')
    intro_text: "Agora vamos falar em criar uma variável `True` (em pt: Verdadeiro) ou `False` (em pt: Falso), podes colocar uma variável em `True` e em `False`. Podes usar isto para acompanhar uma determinada resposta."
    commands:
    -   name: "Exemplo"
        explanation: "Neste exemplo, usamos `True` e `False` para acompanha uma resposta a uma questão. Podes responder 5 vezes. Se a resposta for correcta, resposta_certa será `True`."
        example: "resposta_certa is `False`"
        demo_code: |-
          for i in range(1, 5):
              resposta_certa is False
              resposta is input('Quanto é 5 * 5?')
              if resposta is 25:
                  resposta_certa is True
              else:
                  resposta_certa is False
              if resposta_certa is True:
                  print('Está certo!')
              if resposta_certa is False:
                  print('Está errado! ' 5-i ' tentativas restantes.')
14:
    start_code: |-
        ainda_estas_aqui is False
        ainda_estas_aqui is input('Ainda estás aqui? sim ou não?')
        if ainda_estas_aqui is sim:
            ainda_estas_aqui is True
        resposta is input('Quanto é 5 * 5?')
        if ainda_estas_aqui is True and resposta is 25:
            print('Disseste sim e respondeste certo!')
    intro_text: "We are now going to learn `and` and `or`! If you want to check two statements, you don't have to use two if's but can use `and` and `or`. If you use `and`, both statements, left and right of the `and` need to be true. We can also use `or`. Then only one statement needs to be correct."
    commands:
    -   name: "And"
        explanation: "Both statements (left and right of the `and`) need to be correct."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
          answer1 is input('What is 3+2?')
          answer2 is input('What is 2+2?')
          if answer1 is 5 and answer2 is 4:
              print('Both answers are correct!')
          else:
              print('At least one answer is wrong!')
    -   name: "Or"
        explanation: "`Or` At least 1 of the two statements left and right of the `or`, needs to be correct, if both are correct, it is also fine."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
          answer1 is input('What is 3+2?')
          answer2 is input('What is 2+2?')
          if answer1 is 5 or answer2 is 4:
              print('At least one answer is correct!')
          else:
              print('Both answers are wrong!')
15:
    start_code: |-
        # This is a program that is going to ask a couple of math questions
        for i in range(1, 10):
            # We are going to ask the multiplication table of 5
            answer is input('What is ' i ' times 5?')
            # We check if the answer is the same as our sum
            correct_answer is i * 5
            if answer is correct_answer:
                print(answer ' is correct')
            else:
                print('That is wrong, it is supposed to be: ' i*5)
    intro_text: "When you are making bigger programs, you will need to find a way to remember what every piece of code does. We use comments for this. A comment looks the following:\n ` # This is a comment`. Everything after the # will be invisible for the code."
    commands:
    -   name: "Comment"
        explanation: "We can place comments wherever we want."
        example: "# This is a comment"
        demo_code: |-
            # This program prints Ηello!
            # It has been made in Hedy
            # It does nothing except print Hello!
            print('Ηello!')
16:
    start_code: |-
        age is input('How old are you?')
        if age < 12:
            print('You are younger than me!')
        elif age > 12:
            print('You are older than me!')
    intro_text: "We are going to learn more new items! You might know them already from mathematics, the `<` and `>`. The `<` checks if the first number is smaller than the second, like `4 < 5`. The `>` checks if the first number is bigger than the second, like `6 > 5`."
    commands:
    -   name: "Smaller"
        explanation: "We use the `<` to check if the first number is smaller than the second number. For example if we want to see if a variable is smaller than 15, we use `variable < 15`"
        example: "For example: age < 12"
        demo_code: |-
            age is input('How old are you?')
            if age < 12:
                print('You are younger than me!')
    -   name: "Bigger"
        explanation: "We use the `>` to check if the first number is bigger than the second number. For example if we want to see if a variable is bigger than 15, we use `variable > 15`."
        example: "For example: age > 12"
        demo_code: |-
            age is input('How old are you?')
            if age > 12:
                print('You are older than me!')
17:
    start_code: |-
        correct_answer is False
        # we continue until the correct answer has been given!
        while correct_answer is False:
            answer is input('What is 5 times 5?')
            if answer is 25:
                correct_answer is True
                print('A good answer has been given')
    intro_text: "We are going to learn a new loop, the `while` loop! We continue the loop as long as the statement is true/valid! So at the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop never ends!"
    commands:
    -   name: "Boolean while"
        explanation: "We can use the `while` loop with `True` and `False`"
        example: "Example: while correct_answer is False"
        demo_code: |-
            correct_answer is False
            # we continue until the correct answer has been given!
            while correct_answer is False:
                answer is input('What is 5 times 5?')
                if answer is 25:
                    correct_answer is True
                    print('A good answer has been given')
    -   name: "Smaller while"
        explanation: "We can also use the `while` loop with `<` and `>`. Be careful, you need to change the number so the loop ends. We do that with count is count + 1 now."
        example: "For example: while count < 3"
        demo_code: |-
            count is 1
            # we continue until count is 3!
            while count < 3:
                print('We do this ' 3 - count ' more times')
                count is count + 1
            print('We are done')
18:
    start_code: |-
        list is ['first', 'second', 'third']
        secondvalue is list[2]
        print(secondvalue)
    intro_text: "When we have a list, we can take a specific value from the list. If we want the second item from the list, we type `list[2]`."
    commands:
    -   name: "Count"
        explanation: "We can also sum up all values from a list"
        example: "list[1]"
        demo_code: |-
            list is ['1', '2', '3']
            sum is list[1] + list[2]
            sum is sum + list[3]
            # we expect a 6 here
            print(sum)
19:
    start_code: |-
        fruit is ['apple', 'banana', 'cherry']
        for i in range(1, 3):
            print(fruit[i])
    intro_text: "We can also see everyting in a list with the for loop. Because there are three things in the list, we take the loop from 1 to 3. Now we print everything in the loop."
    commands:
    -   name: "Length of list"
        explanation: "With `length` we can see the size of a list. The list in the example is 3 because there are three things in the list"
        example: "length(list)"
        demo_code: |-
            fruit is ['apple', 'banana', 'cherry']
            print('length of list is ' length(fruit))
            for i in range(1, length(fruit)):
                print(fruit[i])
20:
    start_code: |-
        print('What is 5+3?')
        answer = 5+3
        print('answer is now:')
        print(answer)
        if answer == 8:
            print('That is correct!')
        else:
            print('Oh no, that is wrong!')
    intro_text: "Now we are going to change is into `=` and `==`. We use `=` if we want to assign a value to a variable. If you want to assign 8 to the variable called anser, we do answer = 8. `==` we use when we want to see if two things are the same."
    commands:
    -   name: "Compare"
        explanation: "If we want to compare, we use ==. 5+3 == 8 checks if 5+3 equals 8"
        example: "For example: 5+3 == 8"
        demo_code: |-
            if 5+3 == 8:
                print('5+3 is indeed 8')
            else:
                print('This will not be printed because 5+3 is 8!')
    -   name: "Assign Value"
        explanation: "If we want to say that a variable called answer is 8, we do answer = 8."
        example: "For example: answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
    -   name: "Compare and assign value"
        explanation: "If we are going to compare two values, we use `==`. If we are going to assign a variable, we use `=`. "
        example: "For example: 5+3 == 8, answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
            if answer == 8:
                print('That is correct!')
            else:
                print('No, that is wrong!')
21:
    start_code: |-
        country = input('Where do you live?')
        if land != Netherlands:
            print('Cool!')
        else:
            print('I am also from the Netherlands!')
    intro_text: "We are going to learn a new item, the `!=` . The ! means not and the = means equal so != means not equal. For example 5 != 4."
    commands:
    -   name: "Not equal"
        explanation: "If we are checking if two things are not equal, we use `!=`"
        example: "For example: 5+3 != 9"
        demo_code: |-
            number = input('You are not allowed to say 5, what is a cool number?')
            if getal != 5:
                print('Good job!')
            else:
                print('You were not allowed to say 5!')
22:
    start_code: |-
        age = input('I am 12 years old, how old are you?')
        if age <= 11:
            print('You are younger than I am!')
        elif age >= 13:
            print('You are older than I am!')
    intro_text: "We are going to combine < and = now. If we want to see if something is smaller or equal than the second number, we use `<=`. We can also check if something is bigger or equal than the second number with `>=`."
    commands:
    -   name: "Smaller equal"
        explanation: "`<=` checks if the number on the left of the `<=` is smaller or equal than the one on the right. So 5 < 5 is not true because 5 is not smaller than 5 but 5 <= 5 is true because 5 is smaller or equal to 5. 6 <= 5 is not true."
        example: "For example: age <= 12"
        demo_code: |-
            age = input('I am 13 years old, how old are you?')
            if age <= 12:
                print('You are younger than I am!')
    -   name: "Larger equal"
        explanation: "`>=` checks if the number on the left of the `>=` is bigger or equal than the one on the right. So 5 > 5 is not true because 5 is not bigger than 5 but 5 >= 5 is true because 5 is smaller or equal to 5. 4 >= 5 is not true."
        example: "For example: age >= 12"
        demo_code: |-
            age = input('I am 11 years old, how old are you?')
            if age >= 12:
                print('You are older than I am!')
